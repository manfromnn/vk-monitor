import vk_api
import requests
from vk_api.utils import get_random_id
from datetime import datetime, timedelta
import time
import json
import logging
import re
import os
from typing import List, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('vk_parser.log'),
        logging.StreamHandler()
    ]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
CONFIG = {
    "source_groups": [-12345678, -87654321],  # ID –∏—Å—Ö–æ–¥–Ω—ã—Ö –≥—Ä—É–ø–ø (—Å –º–∏–Ω—É—Å–æ–º)
    "target_group": -11111111,               # ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
    "access_token": "–≤–∞—à_—Ç–æ–∫–µ–Ω_vk",          # VK API —Ç–æ–∫–µ–Ω
    "telegram_token": "–≤–∞—à_—Ç–æ–∫–µ–Ω_telegram",  # Telegram Bot Token
    "telegram_chat_id": "–≤–∞—à_chat_id",       # ID —á–∞—Ç–∞ –≤ Telegram
    "interval": 300,                        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
    "keywords": ["–≤–∞–∂–Ω–æ–µ", "–Ω–æ–≤–æ—Å—Ç—å", "–∞–∫—Ü–∏—è"], # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    "max_text_length": 100,                  # –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    "include_reposts": True,                 # –í–∫–ª—é—á–∞—Ç—å —Ä–µ–ø–æ—Å—Ç—ã
    "include_media": True,                   # –í–∫–ª—é—á–∞—Ç—å –º–µ–¥–∏–∞–≤–ª–æ–∂–µ–Ω–∏—è
    "media_types": ["photo", "video", "doc"] # –¢–∏–ø—ã –º–µ–¥–∏–∞–≤–ª–æ–∂–µ–Ω–∏–π
}

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_FILE = "last_processed.json"
POSTS_CACHE_FILE = "posts_cache.json"

def get_vk_session():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ VK"""
    return vk_api.VkApi(token=CONFIG['access_token'])

def load_json_file(filename: str, default: dict) -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return default

def save_json_file(filename: str, data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    with open(filename, 'w') as f:
        json.dump(data, f)

class VKParser:
    def __init__(self):
        self.vk = get_vk_session().get_api()
        self.state = load_json_file(STATE_FILE, {})
        self.posts_cache = load_json_file(POSTS_CACHE_FILE, {})
        
    def _get_media_attachments(self, post: dict) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏–∞–≤–ª–æ–∂–µ–Ω–∏–π –∏–∑ –ø–æ—Å—Ç–∞"""
        if not CONFIG['include_media'] or 'attachments' not in post:
            return []
        
        attachments = []
        for attach in post['attachments']:
            if attach['type'] in CONFIG['media_types']:
                media = attach[attach['type']]
                # –î–ª—è —Ñ–æ—Ç–æ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                if attach['type'] == 'photo':
                    url = max(
                        media['sizes'], 
                        key=lambda x: x['width'] + x['height']
                    )['url']
                elif attach['type'] == 'video':
                    url = f"video{media['owner_id']}_{media['id']}_{media['access_key']}"
                elif attach['type'] == 'doc':
                    url = media['url']
                attachments.append(f"{attach['type']}{url}")
        return attachments

    def _process_reposts(self, post: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤"""
        if 'copy_history' in post and CONFIG['include_reposts']:
            original = post['copy_history'][0]
            return {
                **original,
                'reposter_id': post['owner_id']
            }
        return post

    def _check_keywords(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        if not CONFIG['keywords']:
            return True
        text = text.lower()
        return any(keyword.lower() in text for keyword in CONFIG['keywords'])

    def get_new_posts(self, group_id: int) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã"""
        last_ts = self.state.get(str(group_id), 0)
        
        try:
            response = self.vk.wall.get(
                owner_id=group_id,
                count=20,
                filter='owner'
            )
        except vk_api.exceptions.ApiError as e:
            logging.error(f"–û—à–∏–±–∫–∞ VK API: {e}")
            return []

        new_posts = []
        for item in response['items']:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            post_time = datetime.fromtimestamp(item['date'])
            if post_time < datetime.now() - timedelta(days=2):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            post_id = f"{item['owner_id']}_{item['id']}"
            if post_id in self.posts_cache:
                continue
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤
            processed_post = self._process_reposts(item)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if not self._check_keywords(processed_post.get('text', '')):
                continue
                
            # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ
            post_data = {
                'id': post_id,
                'text': processed_post.get('text', ''),
                'date': item['date'],
                'url': f"https://vk.com/wall{post_id}",
                'attachments': self._get_media_attachments(processed_post),
                'is_repost': 'reposter_id' in processed_post
            }
            
            new_posts.append(post_data)
            self.posts_cache[post_id] = post_data['date']
            
        if new_posts:
            self.state[str(group_id)] = new_posts[0]['date']
            save_json_file(STATE_FILE, self.state)
            save_json_file(POSTS_CACHE_FILE, self.posts_cache)
            
        return new_posts

class Notifier:
    @staticmethod
    def send_to_vk(post: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ VK"""
        vk = get_vk_session().get_api()
        message = Notifier._prepare_message(post)
        
        try:
            vk.wall.post(
                owner_id=CONFIG['target_group'],
                message=message,
                attachments=','.join(post['attachments']),
                random_id=get_random_id()
            )
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç –≤ VK: {post['id']}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ VK: {e}")

    @staticmethod
    def send_to_telegram(post: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        message = Notifier._prepare_message(post)
        url = f"https://api.telegram.org/bot{CONFIG['telegram_token']}/sendMessage"
        
        payload = {
            'chat_id': CONFIG['telegram_chat_id'],
            'text': message,
            'disable_web_page_preview': not bool(post['attachments'])
        }
        
        try:
            response = requests.post(url, json=payload)
            response.raise_for_status()
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {post['id']}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

    @staticmethod
    def _prepare_message(post: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = re.sub(r'\n{3,}', '\n\n', post['text'].strip())
        if len(text) > CONFIG['max_text_length']:
            text = text[:CONFIG['max_text_length']] + "..."
            
        message = [
            "üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç!" + (" (–†–µ–ø–æ—Å—Ç)" if post['is_repost'] else ""),
            text,
            f"üîó –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: {post['url']}"
        ]
        return '\n'.join(message)

def main():
    parser = VKParser()
    notifier = Notifier()
    
    logging.info("–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –í–ö –∑–∞–ø—É—â–µ–Ω")
    
    while True:
        try:
            for group_id in CONFIG['source_groups']:
                posts = parser.get_new_posts(group_id)
                for post in reversed(posts):
                    notifier.send_to_vk(post)
                    notifier.send_to_telegram(post)
                    time.sleep(1)
                    
            time.sleep(CONFIG['interval'])
            
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(60)

if __name__ == "__main__":
    main()
